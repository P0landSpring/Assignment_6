#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

pthread_mutex_t lock;
int shared_data = 0; // Shared variable

void *writer_thread(void *arg) {
    pthread_mutex_lock(&lock);
    shared_data = 99; // Write to shared variable
    printf("Writer Thread: Wrote value %d\n", shared_data);
    pthread_mutex_unlock(&lock);
    return NULL;
}

void *reader_thread(void *arg) {
    pthread_mutex_lock(&lock);
    printf("Reader Thread: Read value %d\n", shared_data); //display shared variable
    pthread_mutex_unlock(&lock);
    return NULL;
}

int main() {
    pthread_t thread1, thread2;

    // Initialize mutex
    if (pthread_mutex_init(&lock, NULL) != 0) {
        printf("Mutex init failed\n");
        return 1;
    }

    // Create threads
    pthread_create(&thread1, NULL, writer_thread, NULL);
    pthread_create(&thread2, NULL, reader_thread, NULL);

    // Wait for threads to complete
    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    // Destroy mutex
    pthread_mutex_destroy(&lock);

    return 0;
}
